// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using airport;

#nullable disable

namespace airport.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250129064835_29.01.25")]
    partial class _290125
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("airport.Entities.Airplane", b =>
                {
                    b.Property<int>("AirplanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirplanId"));

                    b.Property<string>("AirplaneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AirplanId");

                    b.ToTable("airplanes");
                });

            modelBuilder.Entity("airport.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("airport.Entities.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<int>("AirplanId")
                        .HasColumnType("int");

                    b.Property<int>("AirplaneAirplanId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationLoationLocationId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationLocationId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("LandTime")
                        .HasColumnType("date");

                    b.Property<int>("SourceLoationLocationId")
                        .HasColumnType("int");

                    b.Property<int>("SourceLocationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("TakingOffTime")
                        .HasColumnType("date");

                    b.HasKey("FlightId");

                    b.HasIndex("AirplaneAirplanId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DestinationLoationLocationId");

                    b.HasIndex("SourceLoationLocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("flights");
                });

            modelBuilder.Entity("airport.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("airport.Entities.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("airport.Entities.Flight", b =>
                {
                    b.HasOne("airport.Entities.Airplane", "Airplane")
                        .WithMany()
                        .HasForeignKey("AirplaneAirplanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("airport.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("airport.Entities.Location", "DestinationLoation")
                        .WithMany()
                        .HasForeignKey("DestinationLoationLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("airport.Entities.Location", "SourceLoation")
                        .WithMany()
                        .HasForeignKey("SourceLoationLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("airport.Entities.Status", "status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airplane");

                    b.Navigation("Company");

                    b.Navigation("DestinationLoation");

                    b.Navigation("SourceLoation");

                    b.Navigation("status");
                });
#pragma warning restore 612, 618
        }
    }
}
